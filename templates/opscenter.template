{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Datastax OpsCenter template, License: Apache 2.0 (Please do not remove) May,1,2017",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "OpsCenterSecurityGroupId": {
      "Type": "AWS::EC2::SecurityGroup::Id",
      "Description": "OpsCenter security group id"
    },
    "SubnetId": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "SubnetId in existing VPC`"
    },
    "ClusterName": {
      "Description": "Name of DSE cluster",
      "Type": "String",
      "Default": "DSE Cluster"
    },
    "DCSizes": {
      "Description": "List of number of nodes/datacenter",
      "Type": "CommaDelimitedList"
    },
    "Profile": {
      "Description": "InstanceProfile for OpsC instance",
      "Type": "String"
    },
    "DBPassword": {
      "Type": "String",
      "Description": "C* password",
      "NoEcho": true
    },
    "OpsCPassword": {
      "Type": "String",
      "Description": "Password for default OpsCenter user 'admin'",
      "NoEcho": true
    },
    "S3Bucket": {
      "Description": "S3Bucket for public key passing",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "Node EC2 instance type",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": ["t2.medium", "m4.large", "m4.xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.nano": {
        "Arch": "HVM64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "t2.large": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "PV64"
      },
      "m1.medium": {
        "Arch": "PV64"
      },
      "m1.large": {
        "Arch": "PV64"
      },
      "m1.xlarge": {
        "Arch": "PV64"
      },
      "m2.xlarge": {
        "Arch": "PV64"
      },
      "m2.2xlarge": {
        "Arch": "PV64"
      },
      "m2.4xlarge": {
        "Arch": "PV64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "PV64"
      },
      "c1.xlarge": {
        "Arch": "PV64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "g2.8xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSInstanceType2NATArch": {
      "t1.micro": {
        "Arch": "NATPV64"
      },
      "t2.nano": {
        "Arch": "NATHVM64"
      },
      "t2.micro": {
        "Arch": "NATHVM64"
      },
      "t2.small": {
        "Arch": "NATHVM64"
      },
      "t2.medium": {
        "Arch": "NATHVM64"
      },
      "t2.large": {
        "Arch": "NATHVM64"
      },
      "m1.small": {
        "Arch": "NATPV64"
      },
      "m1.medium": {
        "Arch": "NATPV64"
      },
      "m1.large": {
        "Arch": "NATPV64"
      },
      "m1.xlarge": {
        "Arch": "NATPV64"
      },
      "m2.xlarge": {
        "Arch": "NATPV64"
      },
      "m2.2xlarge": {
        "Arch": "NATPV64"
      },
      "m2.4xlarge": {
        "Arch": "NATPV64"
      },
      "m3.medium": {
        "Arch": "NATHVM64"
      },
      "m3.large": {
        "Arch": "NATHVM64"
      },
      "m3.xlarge": {
        "Arch": "NATHVM64"
      },
      "m3.2xlarge": {
        "Arch": "NATHVM64"
      },
      "m4.large": {
        "Arch": "NATHVM64"
      },
      "m4.xlarge": {
        "Arch": "NATHVM64"
      },
      "m4.2xlarge": {
        "Arch": "NATHVM64"
      },
      "m4.4xlarge": {
        "Arch": "NATHVM64"
      },
      "m4.10xlarge": {
        "Arch": "NATHVM64"
      },
      "c1.medium": {
        "Arch": "NATPV64"
      },
      "c1.xlarge": {
        "Arch": "NATPV64"
      },
      "c3.large": {
        "Arch": "NATHVM64"
      },
      "c3.xlarge": {
        "Arch": "NATHVM64"
      },
      "c3.2xlarge": {
        "Arch": "NATHVM64"
      },
      "c3.4xlarge": {
        "Arch": "NATHVM64"
      },
      "c3.8xlarge": {
        "Arch": "NATHVM64"
      },
      "c4.large": {
        "Arch": "NATHVM64"
      },
      "c4.xlarge": {
        "Arch": "NATHVM64"
      },
      "c4.2xlarge": {
        "Arch": "NATHVM64"
      },
      "c4.4xlarge": {
        "Arch": "NATHVM64"
      },
      "c4.8xlarge": {
        "Arch": "NATHVM64"
      },
      "g2.2xlarge": {
        "Arch": "NATHVMG2"
      },
      "g2.8xlarge": {
        "Arch": "NATHVMG2"
      },
      "r3.large": {
        "Arch": "NATHVM64"
      },
      "r3.xlarge": {
        "Arch": "NATHVM64"
      },
      "r3.2xlarge": {
        "Arch": "NATHVM64"
      },
      "r3.4xlarge": {
        "Arch": "NATHVM64"
      },
      "r3.8xlarge": {
        "Arch": "NATHVM64"
      },
      "i2.xlarge": {
        "Arch": "NATHVM64"
      },
      "i2.2xlarge": {
        "Arch": "NATHVM64"
      },
      "i2.4xlarge": {
        "Arch": "NATHVM64"
      },
      "i2.8xlarge": {
        "Arch": "NATHVM64"
      },
      "d2.xlarge": {
        "Arch": "NATHVM64"
      },
      "d2.2xlarge": {
        "Arch": "NATHVM64"
      },
      "d2.4xlarge": {
        "Arch": "NATHVM64"
      },
      "d2.8xlarge": {
        "Arch": "NATHVM64"
      },
      "hi1.4xlarge": {
        "Arch": "NATHVM64"
      },
      "hs1.8xlarge": {
        "Arch": "NATHVM64"
      },
      "cr1.8xlarge": {
        "Arch": "NATHVM64"
      },
      "cc2.8xlarge": {
        "Arch": "NATHVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "HVM64": "ami-feb6fee9"
      },
      "us-west-2": {
        "HVM64": "ami-01eb3061"
      },
      "us-west-1": {
        "HVM64": "ami-36094156"
      }
    }
  },
  "Resources": {
    "OpsCenterEIP": {
      "Type": "AWS::EC2::EIP"
    },
    "IPAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "InstanceId": {
          "Ref": "OpsCenterInstance"
        },
        "EIP": {
          "Ref": "OpsCenterEIP"
        }
      }
    },
    "OpsCenterWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "OpsCenterWaitHandle"
        },
        "Timeout": "1200"
      }
    },
    "OpsCenterWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    },
    "OpsCenterInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "full_install": ["install_cfn", "install_opsc", "gen_ssh_key", "setup_cluster", "post_install"]
          },
          "install_cfn": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[main]\n",
                    "stack=", {
                      "Ref": "AWS::StackId"
                    }, "\n",
                    "region=", {
                      "Ref": "AWS::Region"
                    }, "\n"
                  ]]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.OpsCenterInstance.Metadata.AWS::CloudFormation::Init\n",
                    "action=/usr/local/bin/cfn-init -v ",
                    "         --stack ", {
                      "Ref": "AWS::StackName"
                    },
                    "         --resource OpsCenterInstance ",
                    "         --configsets full_install ",
                    "         --region ", {
                      "Ref": "AWS::Region"
                    }, "\n",
                    "runas=root\n"
                  ]]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "install_opsc": {
            "commands": {
              "01_install_opsc": {
                "command": {
                  "Fn::Join": ["", [
                    "#!/usr/bin/env bash -e \n",
                    "cloud_type=\"aws\" \n",
                    "cd ~ubuntu \n",
                    "apt-get -y install unzip \n",
                    "wget https://github.com/DSPN/install-datastax-ubuntu/archive/master.zip \n",
                    "unzip master.zip \n",
                    "cd install-datastax-ubuntu-master/bin \n",
                    "./os/install_java.sh \n",
                    "./opscenter/install.sh $cloud_type \n",
                    "./opscenter/start.sh"
                  ]]
                }
              }
            }
          },
          "gen_ssh_key": {
            "commands": {
              "01_gen_ssh_key": {
                "command": {
                  "Fn::Join": ["", [
                    "#!/usr/bin/env bash -e \n",
                    "apt-get -y install awscli \n",
                    "cd ~ubuntu/.ssh/ \n",
                    "ssh-keygen -t rsa -N '' -f lcm.pem \n",
                    "chown ubuntu:ubuntu lcm.pem* \n",
                    "echo 'Generated lcm.pem and lcm.pem.pub' \n",
                    "aws s3 cp lcm.pem.pub s3://", {
                      "Ref": "S3Bucket"
                    }, " \n"
                  ]]
                }
              }
            }
          },
          "setup_cluster": {
            "commands": {
              "01_setup_cluster": {
                "command": {
                  "Fn::Join": ["", [
                    "#!/usr/bin/env bash -e \n",
                    "cd ~ubuntu \n",
                    "pip install requests \n",
                    "cd install-datastax-ubuntu-master/bin/lcm \n",
                    "pubip=$(curl http://169.254.169.254/latest/meta-data/public-ipv4) \n",
                    "privkey=$(readlink -f ~ubuntu/.ssh/lcm.pem) \n",
                    "sleep 1m \n",
                    "sed -ie 's/5.1.0/5.0.8/g' ./setupCluster.py \n",
                    "./setupCluster.py ",
                    "--opsc-ip $pubip ",
                    "--clustername \"", {
                      "Ref": "ClusterName"
                    }, "\" ",
                    "--privkey $privkey ",
                    "--user ubuntu ",
                    "--datapath \"/mnt/cassandra\" \n",
                    "/usr/local/bin/cfn-signal -e 0 -r \"OpsCenter Setup Complete\" \"", {
                      "Ref": "OpsCenterWaitHandle"
                    }, "\" \n"
                  ]]
                }
              }
            }
          },
          "post_install": {
            "commands": {
              "01_post_install": {
                "command": {
                  "Fn::Join": ["", [
                    "#!/usr/bin/env bash -e \n",
                    "cd ~ubuntu/install-datastax-ubuntu-master/bin/lcm \n",
                    "echo 'Blocking execution till LCM jobs finish...' \n",
                    "./waitForJobs.py \n",
                    "aws s3 rm s3://", {
                      "Ref": "S3Bucket"
                    }, "/lcm.pem.pub \n",
                    "cd ~ubuntu/install-datastax-ubuntu-master/bin/opscenter/ \n",
                    "#./set_opsc_pw.sh '", {
                      "Ref": "OpsCPassword"
                    }, "' \n"
                  ]]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", {
              "Ref": "InstanceType"
            }, "Arch"]
          }]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "Profile"
        },
        "SecurityGroupIds": [{
          "Ref": "OpsCenterSecurityGroupId"
        }],
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash -xe\n",
              "apt-get update\n",
              "apt-get -y install python-setuptools python-pip\n",
              "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz \n",
              "ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n",
              "chmod 775 /usr/local/init/ubuntu/cfn-hup \n",
              "update-rc.d cfn-hup defaults \n",
              "/usr/local/bin/cfn-init -v ",
              "         --stack ", {
                "Ref": "AWS::StackId"
              },
              "         --resource OpsCenterInstance ",
              "         --configsets full_install ",
              "         --region ", {
                "Ref": "AWS::Region"
              }, "\n"
            ]]
          }
        }

      }
    }
  },
  "Outputs": {
    "OpsCenterURL": {
      "Value": {
        "Fn::Join": ["", [
          "http://", {
            "Fn::GetAtt": ["OpsCenterInstance", "PublicDnsName"]
          },
          ":8888"
        ]]
      },
      "Description": "URL for OpsCenter"
    },
    "OpsCenterPublicIP": {
      "Value": {
        "Fn::GetAtt": ["OpsCenterInstance", "PublicIp"]
      },
      "Description": "Public IP for OpsCenter"
    },
    "LCMURL": {
      "Value": {
        "Fn::Join": ["", [
          "http://", {
            "Fn::GetAtt": ["OpsCenterInstance", "PublicDnsName"]
          },
          ":8888/opscenter/lcm.html"
        ]]
      },
      "Description": "URL for Lifecycle Manager"
    }
  }
}
